'use client';

import { useState } from 'react';
import { useAccount, usePublicClient, useWalletClient } from 'wagmi';
import { createPublicClient, createWalletClient, custom, parseEther } from 'viem';
import { privateKeyToAccount } from 'viem/accounts';
import { CONTRACTS, ANVIL_CHAIN } from '@/lib/contracts';
import IthacaAccountV2ABI from '@/lib/IthacaAccountV2.abi.json';

interface SignupFlowProps {
  onComplete: () => void;
  onBack: () => void;
}

export function SignupFlow({ onComplete, onBack }: SignupFlowProps) {
  const { address } = useAccount();
  const publicClient = usePublicClient();
  const { data: walletClient } = useWalletClient();
  
  const [step, setStep] = useState<'passkey' | 'email' | 'waitingForReply' | 'generatingProof' | 'deploying' | 'complete'>('passkey');
  const [email, setEmail] = useState('');
  const [passkey, setPasskey] = useState<{ id: string; publicKey: string } | null>(null);
  const [emailCode, setEmailCode] = useState('');

  // Generate a new passkey (WebAuthn)
  const createPasskey = async () => {
    try {
      // For demo purposes, we'll simulate passkey creation
      // In production, you'd use the Web Authentication API
      const mockPasskey = {
        id: 'mock-passkey-' + Math.random().toString(36).substr(2, 9),
        publicKey: '0x' + Array.from({ length: 64 }, () => Math.floor(Math.random() * 16).toString(16)).join('')
      };
      
      setPasskey(mockPasskey);
      setStep('email');
    } catch (error) {
      console.error('Failed to create passkey:', error);
      alert('Failed to create passkey. Please try again.');
    }
  };

  // Send email with zkEmail challenge
  const sendEmail = async () => {
    if (!email) {
      alert('Please enter your email');
      return;
    }

    // Generate random 6-digit code
    const code = Math.floor(100000 + Math.random() * 900000).toString();
    setEmailCode(code);

    // Mock email sending - in production, you'd call your backend
    console.log('Sending email to:', email);
    console.log('Email code:', code);
    
    // Display the email content that would be sent
    const emailContent = `
Subject: PORTO-AUTH-${code}

Reply to this email to complete your registration.

Body: PORTO|${ANVIL_CHAIN.id}|${address}|setEmail|0x0|1|${Math.floor(Date.now() / 1000)}|0x0
    `;
    
    alert(`Email would be sent to ${email}\n\n${emailContent}\n\nFor demo: Click OK to simulate email reply.`);
    
    setStep('waitingForReply');
  };

  // Simulate email reply and proof generation
  const generateProof = async () => {
    setStep('generatingProof');
    
    // Simulate proof generation delay
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Mock proof - in production, this would be generated by zkEmail SDK
    const mockProof = '0x' + Array.from({ length: 512 }, () => Math.floor(Math.random() * 16).toString(16)).join('');
    
    await deployAccount(mockProof);
  };

  // Deploy the account with EIP-7702
  const deployAccount = async (proof: string) => {
    if (!walletClient || !address) return;
    
    setStep('deploying');
    
    try {
      // For demo, we'll use a test private key to simulate the account creation
      // In production, this would be handled differently
      const testAccount = privateKeyToAccount('0x' + Array.from({ length: 64 }, () => Math.floor(Math.random() * 16).toString(16)).join(''));
      
      // Mock the deployment process
      console.log('Deploying account with:');
      console.log('- EOA:', testAccount.address);
      console.log('- Implementation:', CONTRACTS.accountImplementation);
      console.log('- Email hash:', email);
      console.log('- Passkey:', passkey);
      
      // In production, you would:
      // 1. Send EIP-7702 transaction to link EOA to proxy
      // 2. Call registerEmailAndPasskey on the account
      
      setStep('complete');
      
      // Wait a bit before completing
      setTimeout(() => {
        onComplete();
      }, 2000);
      
    } catch (error) {
      console.error('Failed to deploy account:', error);
      alert('Failed to deploy account. Please try again.');
      setStep('passkey');
    }
  };

  return (
    <div className="max-w-md mx-auto">
      {step === 'passkey' && (
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">Create Your Passkey</h2>
          <p className="mb-6 text-gray-600">
            First, let's create a secure passkey for your account
          </p>
          <button
            onClick={createPasskey}
            className="bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-lg"
          >
            Create Passkey
          </button>
          <button
            onClick={onBack}
            className="mt-4 text-gray-500 hover:text-gray-600 text-sm underline block mx-auto"
          >
            Back
          </button>
        </div>
      )}

      {step === 'email' && (
        <div>
          <h2 className="text-2xl font-bold mb-4">Enter Your Email</h2>
          <p className="mb-4 text-gray-600">
            We'll send you an email to verify your account
          </p>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="your@email.com"
            className="w-full p-3 border border-gray-300 rounded-lg mb-4"
          />
          <button
            onClick={sendEmail}
            className="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-lg"
          >
            Send Verification Email
          </button>
          <button
            onClick={() => setStep('passkey')}
            className="mt-4 text-gray-500 hover:text-gray-600 text-sm underline block mx-auto"
          >
            Back
          </button>
        </div>
      )}

      {step === 'waitingForReply' && (
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">Check Your Email</h2>
          <p className="mb-4 text-gray-600">
            We sent a verification email to {email}
          </p>
          <p className="mb-6 text-sm text-gray-500">
            Reply to the email to continue registration
          </p>
          <div className="mb-6">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-500 mx-auto"></div>
          </div>
          <button
            onClick={generateProof}
            className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-lg"
          >
            Simulate Email Reply
          </button>
        </div>
      )}

      {step === 'generatingProof' && (
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">Generating Proof</h2>
          <p className="mb-6 text-gray-600">
            Creating zero-knowledge proof from your email...
          </p>
          <div className="mb-6">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
          </div>
          <p className="text-sm text-gray-500">This may take 20-30 seconds</p>
        </div>
      )}

      {step === 'deploying' && (
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">Creating Your Account</h2>
          <p className="mb-6 text-gray-600">
            Deploying your Porto account on-chain...
          </p>
          <div className="mb-6">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-500 mx-auto"></div>
          </div>
        </div>
      )}

      {step === 'complete' && (
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4 text-green-600">Success!</h2>
          <p className="mb-6 text-gray-600">
            Your Porto account has been created
          </p>
          <div className="text-6xl mb-4">âœ…</div>
        </div>
      )}
    </div>
  );
}